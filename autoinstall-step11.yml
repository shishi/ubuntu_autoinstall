#cloud-config
autoinstall:
  version: 1
  # Step 6: Adding interactive-sections
  interactive-sections:
    - identity
  locale: en_US.UTF-8
  keyboard:
    layout: us
  source:
    id: ubuntu-desktop
    search_drivers: true
  network:
    version: 2
    ethernets:
      any:
        match:
          name: "en*"
        dhcp4: true
        dhcp6: true
  # Step 10: Adding LUKS encryption to LVM
  storage:
    config:
      # Disk selection
      - type: disk
        id: disk0
        match:
          size: largest
        ptable: gpt
        wipe: superblock-recursive
        preserve: false
        grub_device: true
      
      # EFI partition
      - type: partition
        id: partition-efi
        device: disk0
        size: 1G
        flag: boot
        grub_device: true
        number: 1
        preserve: false
      
      # Boot partition (unencrypted)
      - type: partition
        id: partition-boot
        device: disk0
        size: 2G
        number: 2
        preserve: false
      
      # Main partition for LUKS
      - type: partition
        id: partition-main
        device: disk0
        size: -1
        number: 3
        preserve: false
      
      # LUKS encryption layer
      - type: dm_crypt
        id: dm-crypt-main
        volume: partition-main
        key: "TemporaryInsecurePassword2024!"
        preserve: false
      
      # LVM on top of LUKS
      - type: lvm_volgroup
        id: vg0
        name: ubuntu-vg
        devices:
          - dm-crypt-main
        preserve: false
      
      # Root volume
      - type: lvm_partition
        id: lv-root
        volgroup: vg0
        name: root
        size: 90%
        preserve: false
      
      # Swap volume
      - type: lvm_partition
        id: lv-swap
        volgroup: vg0
        name: swap
        size: 10%
        preserve: false
      
      # Filesystems
      - type: format
        id: fs-efi
        volume: partition-efi
        fstype: fat32
        preserve: false
      
      - type: format
        id: fs-boot
        volume: partition-boot
        fstype: ext4
        preserve: false
      
      - type: format
        id: fs-root
        volume: lv-root
        fstype: ext4
        preserve: false
      
      - type: format
        id: fs-swap
        volume: lv-swap
        fstype: swap
        preserve: false
      
      # Mount points
      - type: mount
        id: mount-root
        device: fs-root
        path: /
      
      - type: mount
        id: mount-boot
        device: fs-boot
        path: /boot
      
      - type: mount
        id: mount-efi
        device: fs-efi
        path: /boot/efi
      
      - type: mount
        id: mount-swap
        device: fs-swap
        path: none
  # Step 8: Adding TPM2 and crypto related packages
  packages:
    - git
    - build-essential
    - curl
    - tpm2-tools
    - cryptsetup-initramfs
    - cryptsetup-bin
    - pkg-config
    - libssl-dev
    - xz-utils
  # Step 11: Adding user-data for cloud-init post-installation configuration
  user-data:
    # Create Nix installation script
    write_files:
      - path: /usr/local/bin/setup-nix-multiuser
        permissions: '0755'
        content: |
          #!/bin/bash
          set -euo pipefail
          
          # Nix multi-user installation script
          echo "Installing Nix package manager..."
          
          # Check if already installed
          if [ -f /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh ]; then
              echo "Nix is already installed"
              exit 0
          fi
          
          # Create required users and groups
          groupadd -r nixbld 2>/dev/null || true
          for i in $(seq 1 32); do
              useradd -c "Nix build user $i" -d /var/empty -g nixbld -G nixbld \
                      -M -N -r -s $(which nologin) nixbld$i 2>/dev/null || true
          done
          
          # Download and run the installer
          export NIX_INSTALLER_YES=1
          curl -L https://nixos.org/nix/install | sh -s -- --daemon
          
          # Enable and start nix-daemon
          systemctl enable nix-daemon
          systemctl start nix-daemon
          
          echo "Nix installation complete!"
      
      # Create first-boot setup service
      - path: /etc/systemd/system/first-boot-setup.service
        permissions: '0644'
        content: |
          [Unit]
          Description=First Boot Setup Tasks
          After=network-online.target
          Wants=network-online.target
          ConditionPathExists=!/var/lib/first-boot-setup-done
          
          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/first-boot-setup.sh
          ExecStartPost=/usr/bin/touch /var/lib/first-boot-setup-done
          RemainAfterExit=yes
          StandardOutput=journal+console
          StandardError=journal+console
          
          [Install]
          WantedBy=multi-user.target
      
      # Create first-boot setup script
      - path: /usr/local/bin/first-boot-setup.sh
        permissions: '0755'
        content: |
          #!/bin/bash
          set -euo pipefail
          
          echo "Running first boot setup..."
          
          # Wait for network
          timeout 30 bash -c 'until ping -c1 google.com &>/dev/null; do sleep 2; done' || true
          
          # Install Nix
          if [ -x /usr/local/bin/setup-nix-multiuser ]; then
              /usr/local/bin/setup-nix-multiuser || echo "Nix installation failed, continuing..."
          fi
          
          # Run TPM2 enrollment if available
          if [ -x /usr/local/bin/enroll-tpm2-luks.sh ]; then
              /usr/local/bin/enroll-tpm2-luks.sh || echo "TPM2 enrollment failed, continuing..."
          fi
          
          echo "First boot setup completed!"
    
    # Enable the first-boot service
    runcmd:
      - systemctl enable first-boot-setup.service
  
  # Step 9: Adding late-commands to install systemd-cryptenroll after system update
  # Step 10: Adding LUKS recovery key generation
  late-commands:
    # Update the system first
    - curtin in-target -- apt-get update
    - curtin in-target -- apt-get upgrade -y
    # Install systemd-cryptenroll with error handling
    - 'curtin in-target -- bash -c "apt-get install -y systemd-cryptenroll || echo Warning: systemd-cryptenroll installation failed, continuing without TPM2 enrollment support"'
    # Generate and save LUKS recovery key
    - curtin in-target -- mkdir -p /root/.luks
    - 'curtin in-target -- bash -c "echo TemporaryInsecurePassword2024! | cryptsetup luksAddKey /dev/mapper/dm-crypt-main --key-file=- --key-slot=1 --force-password /root/.luks/recovery-key.txt && chmod 600 /root/.luks/recovery-key.txt"'
    # Create a script for TPM2 enrollment (to be run after first boot when TPM is available)
    - |
      curtin in-target -- bash -c 'cat > /usr/local/bin/enroll-tpm2-luks.sh << "EOF"
      #!/bin/bash
      set -euo pipefail
      
      # Check if TPM2 is available
      if ! systemd-cryptenroll --tpm2-device=list &>/dev/null; then
          echo "TPM2 device not found or not supported"
          exit 1
      fi
      
      # Find the LUKS device
      LUKS_DEVICE=$(lsblk -nlo NAME,TYPE | grep crypt | head -1 | awk '\''{ print $1 }'\'')
      if [ -z "$LUKS_DEVICE" ]; then
          echo "No LUKS encrypted device found"
          exit 1
      fi
      
      # Enroll TPM2
      echo "Enrolling TPM2 for automatic unlock..."
      echo "TemporaryInsecurePassword2024!" | systemd-cryptenroll --tpm2-device=auto --tpm2-pcrs=0+7 "/dev/mapper/$LUKS_DEVICE" --key-file=-
      
      # Update initramfs
      update-initramfs -u
      
      echo "TPM2 enrollment complete. The system will automatically unlock on next boot if secure boot state hasn'\''t changed."
      EOF'
    - curtin in-target -- chmod +x /usr/local/bin/enroll-tpm2-luks.sh
  identity:
    hostname: ubuntu-desktop
    username: ubuntu
    password: "$6$exDY1mhS4KUYCE/2$zmn9ToZwTKLhCw.b4/b.ZRTIZM30JZ4QrOQ2aOXJ8yk96xpcCof0kxKwuX1kqLG/ygbJ1f8wxED22bTL4F46P0"
  ssh:
    install-server: true
    allow-pw: true