#cloud-config
autoinstall:
  version: 1
  interactive-sections:
    - identity
    - network
  identity:
    hostname: ubuntu-desktop
    username: ubuntu
    password: "$6$exDY1mhS4KUYCE/2$zmn9ToZwTKLhCw.b4/b.ZRTIZM30JZ4QrOQ2aOXJ8yk96xpcCof0kxKwuX1kqLG/ygbJ1f8wxED22bTL4F46P0"
  locale: en_US.UTF-8
  keyboard:
    layout: us
  network:
    version: 2
    ethernets:
      any-eth:
        match:
          name: "en*"
        dhcp4: true
        dhcp6: true
        optional: true
    wifis:
      any-wifi:
        match:
          name: "wl*"
        dhcp4: true
        dhcp6: true
        optional: true
  ssh:
    install-server: true
    allow-pw: true
  source:
    id: ubuntu-desktop
    search_drivers: true
  
  storage:
    config:
      - type: disk
        id: disk0
        match:
          size: largest
        ptable: gpt
        wipe: superblock-recursive
        preserve: false
        grub_device: true
      
      - type: partition
        id: partition-efi
        device: disk0
        size: 1G
        flag: boot
        grub_device: true
        number: 1
        preserve: false
      
      - type: partition
        id: partition-boot
        device: disk0
        size: 2G
        number: 2
        preserve: false
      
      - type: partition
        id: partition-main
        device: disk0
        size: -1
        number: 3
        preserve: false
      
      - type: dm_crypt
        id: dm-crypt-main
        volume: partition-main
        key: "temporaryPassword!"
        preserve: false
      
      - type: lvm_volgroup
        id: vg0
        name: ubuntu-vg
        devices:
          - dm-crypt-main
        preserve: false
      
      - type: lvm_partition
        id: lv-swap
        volgroup: vg0
        name: swap
        size: 8G
        preserve: false
      
      - type: lvm_partition
        id: lv-root
        volgroup: vg0
        name: root
        size: -1
        preserve: false
      
      - type: format
        id: fs-efi
        volume: partition-efi
        fstype: fat32
        preserve: false
      
      - type: format
        id: fs-boot
        volume: partition-boot
        fstype: ext4
        preserve: false
      
      - type: format
        id: fs-root
        volume: lv-root
        fstype: ext4
        preserve: false
      
      - type: format
        id: fs-swap
        volume: lv-swap
        fstype: swap
        preserve: false
      
      - type: mount
        id: mount-root
        device: fs-root
        path: /
      
      - type: mount
        id: mount-boot
        device: fs-boot
        path: /boot
      
      - type: mount
        id: mount-efi
        device: fs-efi
        path: /boot/efi
      
      - type: mount
        id: mount-swap
        device: fs-swap
        path: none
  
  packages:
    - git
    - build-essential
    - curl
    - tpm2-tools
    - cryptsetup-initramfs
    - cryptsetup-bin
    - pkg-config
    - libssl-dev
    - xz-utils
  
  late-commands:
    - curtin in-target -- apt-get update
    - curtin in-target -- apt-get upgrade -y
    - 'curtin in-target -- bash -c "apt-get install -y systemd-cryptenroll || echo Warning: systemd-cryptenroll not available"'
    
    # Generate recovery key
    - |
      curtin in-target -- bash -c '
      # Find user home
      FIRST_USER=$(getent passwd | awk -F: "$3 >= 1000 && $3 < 65534 {print $1; exit}")
      USER_HOME="${FIRST_USER:+/home/$FIRST_USER}"
      USER_HOME="${USER_HOME:-/root}"
      
      # Create recovery key
      mkdir -p "$USER_HOME/LUKS-Recovery"
      openssl rand -base64 48 > "$USER_HOME/LUKS-Recovery/recovery-key.txt"
      chmod 700 "$USER_HOME/LUKS-Recovery"
      chmod 600 "$USER_HOME/LUKS-Recovery/recovery-key.txt"
      
      # Simple README
      cat > "$USER_HOME/LUKS-Recovery/README.txt" << EOF
      IMPORTANT: Backup recovery-key.txt immediately!
      This is your only way to recover data if TPM fails.
      EOF
      
      [ -n "$FIRST_USER" ] && chown -R "$FIRST_USER:$FIRST_USER" "$USER_HOME/LUKS-Recovery"
      
      # Add recovery key
      LUKS_DEV=$(blkid -t TYPE="crypto_LUKS" -o device | head -n 1)
      [ -n "$LUKS_DEV" ] && echo "temporaryPassword!" | cryptsetup luksAddKey "$LUKS_DEV" "$USER_HOME/LUKS-Recovery/recovery-key.txt"
      '
    
    # TPM enrollment with automatic notification
    - |
      curtin in-target -- bash -c '
      cat > /usr/local/bin/tpm-enroll << "EOF"
      #!/bin/bash
      set -euo pipefail
      
      LUKS_DEV=$(blkid -t TYPE="crypto_LUKS" -o device | head -n 1)
      [ -z "$LUKS_DEV" ] && exit 1
      
      # Check if already enrolled
      if [ -f /var/lib/tpm2-enrolled ] && cryptsetup luksDump "$LUKS_DEV" 2>/dev/null | grep -q "systemd-tpm2"; then
        exit 0
      fi
      
      # Try enrollment
      if systemd-cryptenroll --tpm2-device=auto --tpm2-pcrs=0+7 "$LUKS_DEV" 2>/dev/null; then
        touch /var/lib/tpm2-enrolled
        update-initramfs -u
        echo "temporaryPassword!" | cryptsetup luksRemoveKey "$LUKS_DEV" 2>/dev/null || true
        rm -f /etc/tpm-failed  # Clear any previous failure
      else
        # Mark failure for notification
        echo "$(date): TPM enrollment failed" > /etc/tpm-failed
        exit 1
      fi
      EOF
      chmod +x /usr/local/bin/tpm-enroll
      '
    
    # Login notification for TPM failure
    - |
      curtin in-target -- bash -c '
      cat > /etc/profile.d/tpm-check.sh << "EOF"
      #!/bin/bash
      # Notify user of TPM enrollment failure on every login
      
      if [ -f /etc/tpm-failed ] && [ ! -f /var/lib/tpm2-enrolled ]; then
        echo
        echo "============================================================"
        echo "⚠️  SECURITY WARNING: TPM ENROLLMENT FAILED!"
        echo "============================================================"
        echo "Your disk encryption is using a weak temporary password."
        echo
        echo "Fix this NOW:"
        echo "  1. Enable TPM in BIOS/UEFI settings"
        echo "  2. Run: sudo tpm-enroll"
        echo
        echo "Details: https://github.com/shishi/ubuntu_autoinstall#tpm-enrollment-failed"
        echo "============================================================"
        echo
        
        # Also notify via system notification if in GUI
        if [ -n "$DISPLAY" ]; then
          notify-send -u critical "TPM Enrollment Failed" "Your disk encryption is at risk. Run: sudo tpm-enroll" 2>/dev/null || true
        fi
      fi
      EOF
      chmod 644 /etc/profile.d/tpm-check.sh
      '
    
    # Service for boot-time enrollment
    - |
      curtin in-target -- bash -c '
      cat > /etc/systemd/system/tpm-enroll.service << EOF
      [Unit]
      Description=TPM LUKS Enrollment
      DefaultDependencies=no
      Before=sysinit.target
      After=systemd-modules-load.service
      ConditionPathExists=!/var/lib/tpm2-enrolled
      
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/usr/local/bin/tpm-enroll
      Restart=on-failure
      RestartSec=30
      StartLimitBurst=5
      
      [Install]
      WantedBy=sysinit.target
      EOF
      
      systemctl enable tpm-enroll.service
      '
    
    # MOTD warning for SSH users
    - |
      curtin in-target -- bash -c '
      cat > /etc/update-motd.d/99-tpm-warning << "EOF"
      #!/bin/bash
      if [ -f /etc/tpm-failed ] && [ ! -f /var/lib/tpm2-enrolled ]; then
        echo
        echo "*** TPM ENROLLMENT FAILED - SECURITY RISK ***"
        echo "*** Run: sudo tpm-enroll                  ***"
        echo
      fi
      EOF
      chmod +x /etc/update-motd.d/99-tpm-warning
      '
