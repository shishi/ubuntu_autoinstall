#cloud-config
autoinstall:
  version: 1
  # Step 6: Adding interactive-sections
  interactive-sections:
    - identity
  identity:
    hostname: ubuntu-desktop
    username: ubuntu
    password: "$6$exDY1mhS4KUYCE/2$zmn9ToZwTKLhCw.b4/b.ZRTIZM30JZ4QrOQ2aOXJ8yk96xpcCof0kxKwuX1kqLG/ygbJ1f8wxED22bTL4F46P0"
  locale: en_US.UTF-8
  keyboard:
    layout: us
  network:
    version: 2
    ethernets:
      any:
        match:
          name: "en*"
        dhcp4: true
        dhcp6: true
  ssh:
    install-server: true
    allow-pw: true
  source:
    id: ubuntu-desktop
    search_drivers: true
  # Step 10: Adding LUKS encryption to LVM
  storage:
    config:
      # Disk selection
      - type: disk
        id: disk0
        match:
          size: largest
        ptable: gpt
        wipe: superblock-recursive
        preserve: false
        grub_device: true
      
      # EFI partition
      - type: partition
        id: partition-efi
        device: disk0
        size: 1G
        flag: boot
        grub_device: true
        number: 1
        preserve: false
      
      # Boot partition (unencrypted)
      - type: partition
        id: partition-boot
        device: disk0
        size: 2G
        number: 2
        preserve: false
      
      # Main partition for LUKS
      - type: partition
        id: partition-main
        device: disk0
        size: -1
        number: 3
        preserve: false
      
      # LUKS encryption layer
      - type: dm_crypt
        id: dm-crypt-main
        volume: partition-main
        key: "TemporaryInsecurePassword2024!"
        preserve: false
      
      # LVM on top of LUKS
      - type: lvm_volgroup
        id: vg0
        name: ubuntu-vg
        devices:
          - dm-crypt-main
        preserve: false
      
      # Swap volume (create first with fixed size)
      - type: lvm_partition
        id: lv-swap
        volgroup: vg0
        name: swap
        size: 8G
        preserve: false
      
      # Root volume (use remaining space)
      - type: lvm_partition
        id: lv-root
        volgroup: vg0
        name: root
        size: -1
        preserve: false
      
      # Filesystems
      - type: format
        id: fs-efi
        volume: partition-efi
        fstype: fat32
        preserve: false
      
      - type: format
        id: fs-boot
        volume: partition-boot
        fstype: ext4
        preserve: false
      
      - type: format
        id: fs-root
        volume: lv-root
        fstype: ext4
        preserve: false
      
      - type: format
        id: fs-swap
        volume: lv-swap
        fstype: swap
        preserve: false
      
      # Mount points
      - type: mount
        id: mount-root
        device: fs-root
        path: /
      
      - type: mount
        id: mount-boot
        device: fs-boot
        path: /boot
      
      - type: mount
        id: mount-efi
        device: fs-efi
        path: /boot/efi
      
      - type: mount
        id: mount-swap
        device: fs-swap
        path: none
  # Step 8: Adding TPM2 and crypto related packages
  packages:
    - git
    - build-essential
    - curl
    - tpm2-tools
    - cryptsetup-initramfs
    - cryptsetup-bin
    - pkg-config
    - libssl-dev
    - xz-utils
  # Step 9: Adding late-commands to install systemd-cryptenroll after system update
  # Step 10: Adding LUKS recovery key generation
  late-commands:
    # Update the system first
    - curtin in-target -- apt-get update
    - curtin in-target -- apt-get upgrade -y
    # Install systemd-cryptenroll with error handling
    - 'curtin in-target -- bash -c "apt-get install -y systemd-cryptenroll || echo Warning: systemd-cryptenroll installation failed, continuing without TPM2 enrollment support"'
    # Generate recovery key and display it for backup
    - |
      curtin in-target -- bash -c '
      mkdir -p /root/.luks
      # Generate a random recovery key
      openssl rand -base64 32 > /root/.luks/recovery-key.txt
      chmod 600 /root/.luks/recovery-key.txt
      
      # Create a notice file for the user
      cat > /root/IMPORTANT-BACKUP-RECOVERY-KEY.txt << "EOF"
      ==========================================
      IMPORTANT: BACKUP YOUR LUKS RECOVERY KEY!
      ==========================================
      
      Your LUKS recovery key is stored in:
      /root/.luks/recovery-key.txt
      
      YOU MUST BACKUP THIS KEY EXTERNALLY!
      - Copy to a USB drive
      - Print and store securely
      - Save to a password manager
      
      Without this key, you cannot recover your data if you forget your password!
      
      To display the key:
      sudo cat /root/.luks/recovery-key.txt
      
      To copy to USB (example):
      sudo cp /root/.luks/recovery-key.txt /media/usb/luks-recovery-key-$(hostname)-$(date +%Y%m%d).txt
      ==========================================
      EOF
      chmod 644 /root/IMPORTANT-BACKUP-RECOVERY-KEY.txt
      '
    # Store recovery key info for later use (will be added to LUKS on first boot)
    - |
      curtin in-target -- bash -c '
      cat > /root/.luks/add-recovery-key.sh << "EOF"
      #!/bin/bash
      # This script will be run on first boot to add the recovery key
      LUKS_DEVICE=$(blkid -t TYPE="crypto_LUKS" -o device | head -n 1)
      if [ -n "$LUKS_DEVICE" ] && [ -f /root/.luks/recovery-key.txt ]; then
        echo "TemporaryInsecurePassword2024!" | cryptsetup luksAddKey "$LUKS_DEVICE" /root/.luks/recovery-key.txt --key-file=-
        echo "Recovery key has been added to LUKS device"
        rm -f /root/.luks/add-recovery-key.sh
      fi
      EOF
      chmod +x /root/.luks/add-recovery-key.sh
      '
    # Create a script for TPM2 enrollment (to be run after first boot when TPM is available)
    - |
      curtin in-target -- bash -c 'cat > /usr/local/bin/enroll-tpm2-luks.sh << "EOF"
      #!/bin/bash
      set -euo pipefail
      
      # Find the LUKS device
      LUKS_DEVICE=$(blkid -t TYPE="crypto_LUKS" -o device | head -n 1)
      if [ -z "$LUKS_DEVICE" ]; then
          echo "No LUKS encrypted device found"
          exit 1
      fi
      
      # Add recovery key if script exists
      if [ -x /root/.luks/add-recovery-key.sh ]; then
          echo "Adding recovery key to LUKS..."
          /root/.luks/add-recovery-key.sh
          
          # Display warning
          echo ""
          echo "============================================"
          echo "WARNING: LUKS RECOVERY KEY NEEDS BACKUP!"
          echo "============================================"
          echo "Location: /root/.luks/recovery-key.txt"
          echo "Please backup this key to external media!"
          echo "============================================"
      fi
      
      # Check if TPM2 is available
      if ! systemd-cryptenroll --tpm2-device=list &>/dev/null; then
          echo "TPM2 device not found or not supported"
          exit 0
      fi
      
      # Enroll TPM2
      echo "Enrolling TPM2 for automatic unlock..."
      echo "TemporaryInsecurePassword2024!" | systemd-cryptenroll --tpm2-device=auto --tpm2-pcrs=0+7 "$LUKS_DEVICE" --key-file=-
      
      # Update initramfs
      update-initramfs -u
      
      echo "TPM2 enrollment complete. The system will automatically unlock on next boot if secure boot state hasn'\''t changed."
      EOF'
    - curtin in-target -- chmod +x /usr/local/bin/enroll-tpm2-luks.sh
    # Create systemd service for first-boot TPM enrollment
    - |
      curtin in-target -- bash -c 'cat > /etc/systemd/system/tpm2-luks-enroll.service << "EOF"
      [Unit]
      Description=Enroll TPM2 for LUKS unlock
      After=multi-user.target
      ConditionPathExists=!/var/lib/tpm2-luks-enrolled
      
      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/enroll-tpm2-luks.sh
      ExecStartPost=/usr/bin/touch /var/lib/tpm2-luks-enrolled
      RemainAfterExit=yes
      
      [Install]
      WantedBy=multi-user.target
      EOF'
    - curtin in-target -- systemctl enable tpm2-luks-enroll.service
