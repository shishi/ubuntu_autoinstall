#cloud-config
autoinstall:
  version: 1
  interactive-sections:
    - identity
    - network
  identity:
    hostname: ubuntu-desktop
    username: ubuntu
    password: "$6$exDY1mhS4KUYCE/2$zmn9ToZwTKLhCw.b4/b.ZRTIZM30JZ4QrOQ2aOXJ8yk96xpcCof0kxKwuX1kqLG/ygbJ1f8wxED22bTL4F46P0"
  locale: en_US.UTF-8
  keyboard:
    layout: us
  network:
    version: 2
    ethernets:
      any-eth:
        match:
          name: "en*"
        dhcp4: true
        dhcp6: true
        optional: true
    wifis:
      any-wifi:
        match:
          name: "wl*"
        dhcp4: true
        dhcp6: true
        optional: true
  ssh:
    install-server: true
    allow-pw: true
  source:
    id: ubuntu-desktop
    search_drivers: true
  shutdown: reboot

  storage:
    config:
      - type: disk
        id: disk0
        match:
          size: largest
        ptable: gpt
        wipe: superblock-recursive
        preserve: false
        grub_device: false
      
      - type: partition
        id: partition-efi
        device: disk0
        size: 1G
        flag: boot
        number: 1
        preserve: false
        grub_device: true
      
      - type: partition
        id: partition-boot
        device: disk0
        size: 2G
        number: 2
        preserve: false
      
      - type: partition
        id: partition-main
        device: disk0
        size: -1
        number: 3
        preserve: false
      
      - type: dm_crypt
        id: dm-crypt-main
        dm_name: dm_crypt-main  # Explicitly set the mapper name
        volume: partition-main
        key: "ubuntuKey"
        preserve: false
      
      - type: lvm_volgroup
        id: vg0
        name: ubuntu-vg
        devices:
          - dm-crypt-main
        preserve: false
      
      - type: lvm_partition
        id: lv-swap
        volgroup: vg0
        name: swap
        size: 8G
        preserve: false
      
      - type: lvm_partition
        id: lv-root
        volgroup: vg0
        name: root
        size: -1
        preserve: false
      
      - type: format
        id: fs-efi
        volume: partition-efi
        fstype: vfat
        preserve: false
      
      - type: format
        id: fs-boot
        volume: partition-boot
        fstype: ext4
        preserve: false
      
      - type: format
        id: fs-root
        volume: lv-root
        fstype: ext4
        preserve: false
      
      - type: format
        id: fs-swap
        volume: lv-swap
        fstype: swap
        preserve: false
      
      - type: mount
        id: mount-root
        device: fs-root
        path: /
      
      - type: mount
        id: mount-boot
        device: fs-boot
        path: /boot
      
      - type: mount
        id: mount-efi
        device: fs-efi
        path: /boot/efi
      
      - type: mount
        id: mount-swap
        device: fs-swap
        path: none
  
  packages:
    - git
    - build-essential
    - curl
    - tpm2-tools
    - cryptsetup-initramfs
    - cryptsetup-bin
    - pkg-config
    - libssl-dev
    - xz-utils
  
  late-commands:
    # Create directory structure first
    - curtin in-target -- mkdir -p /var/lib/tpm-luks /var/log/tpm-luks
    
    - curtin in-target -- apt-get update
    - curtin in-target -- apt-get upgrade -y
    - |
      curtin in-target -- bash -c '
      if ! apt-get install -y systemd-cryptenroll; then
        echo "ERROR: systemd-cryptenroll installation failed" > /var/lib/tpm-luks/install-failed
        echo "$(date): systemd-cryptenroll installation failed" >> /var/log/tpm-luks/install.log
        # Continue installation but mark failure
      fi
      '
    
    # Create organized directory structure for TPM state
    - |
      curtin in-target -- bash -c '
      # File placement policy:
      # /var/lib/tpm-luks/ - Persistent state data (enrolled, device info)
      # /var/log/tpm-luks/ - Log files
      # /etc/tpm-luks/     - Configuration (if needed in future)
      
      mkdir -p /var/lib/tpm-luks
      mkdir -p /var/log/tpm-luks
      
      # Find LUKS device using blkid (most reliable method based on cryptsetup documentation)
      LUKS_DEV=$(blkid -t TYPE="crypto_LUKS" -o device | head -1)
      
      # Fallback to searching for partition 3 if blkid fails
      if [ -z "$LUKS_DEV" ]; then
        LUKS_DEV=$(lsblk -nlo NAME,TYPE | grep "part" | sed -n "3p" | awk "{print \"/dev/\"\$1}")
        # Verify it is actually LUKS
        if [ -n "$LUKS_DEV" ] && ! cryptsetup isLuks "$LUKS_DEV" 2>/dev/null; then
          LUKS_DEV=""
        fi
      fi
      
      echo "$LUKS_DEV" > /var/lib/tpm-luks/device
      '
    
    # Generate recovery key
    - |
      curtin in-target -- bash -c '
      # Find user home - check passwd file for real users
      FIRST_USER=$(grep -E "^[^:]+:[^:]+:(1[0-9]{3}|[2-9][0-9]{3}):" /etc/passwd | grep -v "nobody" | head -1 | cut -d: -f1)
      
      # Fallback to checking home directories
      if [ -z "$FIRST_USER" ]; then
        for user in $(ls /home 2>/dev/null); do
          if [ -d "/home/$user" ]; then
            uid=$(id -u "$user" 2>/dev/null)
            if [ -n "$uid" ] && [ "$uid" -ge 1000 ] && [ "$uid" -lt 65534 ]; then
              FIRST_USER="$user"
              break
            fi
          fi
        done
      fi
      
      USER_HOME="${FIRST_USER:+/home/$FIRST_USER}"
      USER_HOME="${USER_HOME:-/root}"
      
      mkdir -p "$USER_HOME/LUKS-Recovery"
      openssl rand -base64 48 > "$USER_HOME/LUKS-Recovery/recovery-key.txt"
      chmod 700 "$USER_HOME/LUKS-Recovery"
      chmod 600 "$USER_HOME/LUKS-Recovery/recovery-key.txt"
      
      cat > "$USER_HOME/LUKS-Recovery/README.txt" << "READMEEOF"
      LUKS Recovery Key
      =================
      
      This directory contains your LUKS disk encryption recovery key.
      
      IMPORTANT:
      - Backup recovery-key.txt immediately to a secure external location
      - This is your only way to recover data if TPM fails
      - Without this key or TPM, you cannot access your encrypted data
      
      If TPM enrollment fails, see:
      https://github.com/shishi/ubuntu_autoinstall#tpm-enrollment-failed
      READMEEOF
      
      [ -n "$FIRST_USER" ] && chown -R "$FIRST_USER:$FIRST_USER" "$USER_HOME/LUKS-Recovery"
      
      # Add recovery key
      LUKS_DEV=$(cat /var/lib/tpm-luks/device 2>/dev/null)
      [ -n "$LUKS_DEV" ] && echo "ubuntuKey" | cryptsetup luksAddKey "$LUKS_DEV" "$USER_HOME/LUKS-Recovery/recovery-key.txt"
      '
    
    # TPM enrollment script with organized file structure
    - |
      curtin in-target -- bash -c '
      cat > /usr/local/bin/tpm-enroll << "EOF"
      #!/bin/bash
      set -euo pipefail
      
      # Consistent file locations
      STATE_DIR="/var/lib/tpm-luks"
      LOG_DIR="/var/log/tpm-luks"
      ENROLLED_MARKER="$STATE_DIR/enrolled"
      FAILED_MARKER="$STATE_DIR/failed"
      LOG_FILE="$LOG_DIR/enrollment.log"
      
      # Ensure directories exist
      mkdir -p "$STATE_DIR" "$LOG_DIR"
      
      # Logging function
      log() {
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] $*" | tee -a "$LOG_FILE"
      }
      
      # Get LUKS device
      LUKS_DEV=$(cat "$STATE_DIR/device" 2>/dev/null || blkid -t TYPE="crypto_LUKS" -o device | head -n 1)
      if [ -z "$LUKS_DEV" ]; then
        log "ERROR: No LUKS device found"
        exit 1
      fi
      
      # Check if already enrolled
      if [ -f "$ENROLLED_MARKER" ] && cryptsetup luksDump "$LUKS_DEV" 2>/dev/null | grep -q "systemd-tpm2"; then
        log "TPM already enrolled"
        exit 0
      fi
      
      # Check if systemd-cryptenroll was installed successfully
      if [ -f /var/lib/tpm-luks/install-failed ]; then
        log "ERROR: systemd-cryptenroll is not installed"
        echo "$(date): systemd-cryptenroll not installed" > "$FAILED_MARKER"
        exit 1
      fi
      
      # Check TPM availability
      if ! systemd-cryptenroll --tpm2-device=list &>/dev/null; then
        log "ERROR: TPM2 not available"
        echo "$(date): TPM not available" > "$FAILED_MARKER"
        exit 1
      fi
      
      # Try enrollment
      log "Attempting TPM enrollment for $LUKS_DEV"
      if systemd-cryptenroll --tpm2-device=auto --tpm2-pcrs=0+7 "$LUKS_DEV" 2>&1 | tee -a "$LOG_FILE"; then
        touch "$ENROLLED_MARKER"
        echo "$(date)" > "$STATE_DIR/enrolled-date"
        rm -f "$FAILED_MARKER"
        log "TPM enrollment successful"
        
        # Update initramfs
        log "Updating initramfs"
        update-initramfs -u 2>&1 | tee -a "$LOG_FILE"
        
        # Remove temporary password using slot-specific method
        log "Removing temporary password"
        
        # Find slots containing the temporary password
        TEMP_SLOTS=$(cryptsetup luksDump "$LUKS_DEV" | grep -E "^[[:space:]]*[0-9]+: luks2" | cut -d: -f1 | while read slot; do
          if echo "ubuntuKey" | cryptsetup luksOpen --test-passphrase "$LUKS_DEV" --key-slot "$slot" 2>/dev/null; then
            echo "$slot"
          fi
        done)
        
        # Remove each slot containing the temporary password
        if [ -n "$TEMP_SLOTS" ]; then
          for slot in $TEMP_SLOTS; do
            log "Removing temporary password from slot $slot"
            if echo "ubuntuKey" | cryptsetup luksKillSlot "$LUKS_DEV" "$slot" 2>&1 | tee -a "$LOG_FILE"; then
              log "Successfully removed slot $slot"
            else
              log "WARNING: Failed to remove slot $slot"
            fi
          done
        else
          log "No slots found with temporary password"
        fi
        
        # Verify removal
        if echo "ubuntuKey" | cryptsetup luksOpen --test-passphrase "$LUKS_DEV" 2>/dev/null; then
          log "ERROR: Temporary password still exists after removal attempts"
        else
          log "Verified: Temporary password successfully removed"
        fi
        
        # Final verification
        if echo ubuntuKey | cryptsetup luksOpen --test-passphrase "$LUKS_DEV" 2>/dev/null; then
          log "ERROR: Failed to remove temporary password after 3 attempts!"
          log "Manual removal will be required"
        fi
      else
        echo "$(date): Enrollment failed" > "$FAILED_MARKER"
        log "ERROR: TPM enrollment failed"
        exit 1
      fi
      EOF
      chmod +x /usr/local/bin/tpm-enroll
      '
    
    # Status check script
    - |
      curtin in-target -- bash -c '
      cat > /usr/local/bin/tpm-status << "EOF"
      #!/bin/bash
      
      # Consistent file locations
      STATE_DIR="/var/lib/tpm-luks"
      LOG_DIR="/var/log/tpm-luks"
      
      echo "=== TPM Enrollment Status ==="
      echo "Date: $(date)"
      echo
      
      # Initialize problem counter
      PROBLEMS=0
      
      # Check state files
      if [ -f "$STATE_DIR/enrolled" ]; then
        echo "[OK] Enrollment marker exists"
        echo "  Enrolled: $(cat "$STATE_DIR/enrolled-date" 2>/dev/null || echo "unknown date")"
      else
        echo "[FAIL] Not enrolled"
        PROBLEMS=$((PROBLEMS + 1))
      fi
      
      if [ -f "$STATE_DIR/failed" ]; then
        echo "[WARN] Last failure: $(cat "$STATE_DIR/failed")"
        PROBLEMS=$((PROBLEMS + 1))
      fi
      
      # Check LUKS
      LUKS_DEV=$(cat "$STATE_DIR/device" 2>/dev/null || blkid -t TYPE="crypto_LUKS" -o device | head -n 1)
      if [ -n "$LUKS_DEV" ]; then
        echo
        echo "LUKS Device: $LUKS_DEV"
        
        # Check for TPM token
        HAS_TPM_TOKEN=false
        if cryptsetup luksDump "$LUKS_DEV" 2>/dev/null | grep -q "systemd-tpm2"; then
          echo "[OK] TPM2 token present in LUKS header"
          HAS_TPM_TOKEN=true
        else
          echo "[FAIL] No TPM2 token in LUKS header"
          PROBLEMS=$((PROBLEMS + 1))
        fi
        
        echo
        echo "Key slots:"
        SLOTS=$(cryptsetup luksDump "$LUKS_DEV" 2>/dev/null | grep -E "^\s*[0-9]+: luks2")
        if [ -n "$SLOTS" ]; then
          echo "$SLOTS"
          
          # Check for unbound slots (TPM slots)
          if ! echo "$SLOTS" | grep -q "unbound"; then
            if [ "$HAS_TPM_TOKEN" = false ]; then
              echo "  [WARN] No TPM-bound slots found (no 'unbound' slots)"
            fi
          fi
          
          # Count active slots
          SLOT_COUNT=$(echo "$SLOTS" | wc -l)
          if [ "$SLOT_COUNT" -gt 2 ] && [ "$HAS_TPM_TOKEN" = false ]; then
            echo "  [WARN] Multiple password slots active - temporary password may still be present"
            PROBLEMS=$((PROBLEMS + 1))
          fi
        else
          echo "  Unable to read slots"
          PROBLEMS=$((PROBLEMS + 1))
        fi
        
        # Check for tokens
        echo
        echo "Tokens:"
        TOKENS=$(cryptsetup luksDump "$LUKS_DEV" 2>/dev/null | grep -A10 "^Tokens:" | grep -E "^\s*[0-9]+:")
        if [ -n "$TOKENS" ]; then
          echo "$TOKENS"
        else
          echo "  [FAIL] No tokens found"
        fi
      else
        echo "[FAIL] No LUKS device found"
        PROBLEMS=$((PROBLEMS + 1))
      fi
      
      # Check TPM device
      echo
      echo "TPM Device:"
      if [ -e /dev/tpm0 ] || [ -e /dev/tpmrm0 ]; then
        echo "[OK] TPM device present"
        ls -la /dev/tpm* 2>/dev/null
      else
        echo "[FAIL] No TPM device found"
        PROBLEMS=$((PROBLEMS + 1))
      fi
      
      # Check systemd-cryptenroll availability
      echo
      echo "TPM2 Support:"
      if systemd-cryptenroll --tpm2-device=list &>/dev/null; then
        echo "[OK] systemd-cryptenroll TPM2 support available"
      else
        echo "[FAIL] systemd-cryptenroll TPM2 support NOT available"
        PROBLEMS=$((PROBLEMS + 1))
      fi
      
      # Recent logs
      if [ -f "$LOG_DIR/enrollment.log" ]; then
        echo
        echo "Recent enrollment logs:"
        tail -5 "$LOG_DIR/enrollment.log" 2>/dev/null
      fi
      
      # Summary and actionable advice
      echo
      echo "=== Summary ==="
      if [ "$PROBLEMS" -eq 0 ] && [ -f "$STATE_DIR/enrolled" ]; then
        echo "[OK] TPM enrollment appears to be working correctly"
      else
        echo "[FAIL] Found $PROBLEMS problem(s)"
        
        if [ ! -f "$STATE_DIR/enrolled" ] || [ "$HAS_TPM_TOKEN" = false ]; then
          echo
          echo "SECURITY WARNING:"
          echo "Your disk encryption is using a temporary password: ubuntuKey"
          echo
          echo "To fix this:"
          echo "  1. Enable TPM 2.0 in BIOS/UEFI (not TPM 1.2)"
          echo "  2. Run: sudo tpm-enroll"
          echo
          echo "For detailed help: https://github.com/shishi/ubuntu_autoinstall#tpm-enrollment-failed"
        fi
      fi
      EOF
      chmod +x /usr/local/bin/tpm-status
      '
    
    # Login notification for failures
    - |
      curtin in-target -- bash -c '
      cat > /etc/profile.d/tpm-check.sh << "EOF"
      #!/bin/bash
      # Check TPM enrollment status on login
      
      STATE_DIR="/var/lib/tpm-luks"
      
      if [ -f "$STATE_DIR/failed" ] && [ ! -f "$STATE_DIR/enrolled" ]; then
        echo
        echo "============================================================"
        echo "***  SECURITY WARNING: TPM ENROLLMENT FAILED! ***"
        echo "============================================================"
        echo "Your disk encryption is using a weak temporary password: ubuntuKey"
        echo
        echo "Fix this NOW:"
        echo "  1. Check TPM status: sudo tpm-status"
        echo "  2. Enable TPM in BIOS if needed"
        echo "  3. Run: sudo tpm-enroll"
        echo
        echo "Details: https://github.com/shishi/ubuntu_autoinstall#tpm-enrollment-failed"
        echo "============================================================"
        echo
        
        # GUI notification for desktop users
        if [ -n "$DISPLAY" ] && command -v notify-send >/dev/null 2>&1; then
          # Critical notification that persists
          notify-send -u critical -t 0 \
            "Security Alert: TPM Enrollment Failed" \
            "Your disk encryption is using a weak temporary password!\n\nRun: sudo tpm-enroll" 2>/dev/null || true
          
          # Also try zenity for a more prominent warning if available
          if command -v zenity >/dev/null 2>&1; then
            zenity --warning \
              --title="TPM Enrollment Failed" \
              --text="Your disk encryption is at risk!\n\nTemporary password (ubuntuKey) is still active.\n\nPlease run: sudo tpm-enroll" \
              --width=400 2>/dev/null &
          fi
        fi
        
        # For Wayland sessions
        if [ -n "$WAYLAND_DISPLAY" ] && command -v notify-send >/dev/null 2>&1; then
          notify-send -u critical -t 0 \
            "Security Alert: TPM Enrollment Failed" \
            "Your disk encryption is using a weak temporary password!\n\nRun: sudo tpm-enroll" 2>/dev/null || true
        fi
      fi
      EOF
      chmod 644 /etc/profile.d/tpm-check.sh
      '
    
    # Service for boot-time enrollment
    - |
      curtin in-target -- bash -c '
      cat > /etc/systemd/system/tpm-enroll.service << EOF
      [Unit]
      Description=TPM LUKS Enrollment
      DefaultDependencies=no
      Before=sysinit.target
      After=systemd-modules-load.service
      ConditionPathExists=!/var/lib/tpm-luks/enrolled
      
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/usr/local/bin/tpm-enroll
      Restart=on-failure
      RestartSec=30
      StartLimitBurst=5
      StandardOutput=journal
      StandardError=journal
      
      [Install]
      WantedBy=sysinit.target
      EOF
      
      systemctl enable tpm-enroll.service
      '
    
    # Fix crypttab to use correct device mapping
    - |
      curtin in-target -- bash -c '
      # Find LUKS device using blkid (most reliable method based on cryptsetup documentation)
      LUKS_DEV=$(blkid -t TYPE="crypto_LUKS" -o device | head -1)
      
      # Fallback to searching for partition 3 if blkid fails
      if [ -z "$LUKS_DEV" ]; then
        LUKS_DEV=$(lsblk -nlo NAME,TYPE | grep "part" | sed -n "3p" | awk "{print \"/dev/\"\$1}")
        # Verify it is actually LUKS
        if [ -n "$LUKS_DEV" ] && ! cryptsetup isLuks "$LUKS_DEV" 2>/dev/null; then
          LUKS_DEV=""
        fi
      fi
      
      LUKS_UUID=$(blkid -s UUID -o value "$LUKS_DEV")
      
      # Check if crypttab already exists and backup
      [ -f /etc/crypttab ] && cp /etc/crypttab /etc/crypttab.backup
      
      # Append to existing crypttab instead of overwriting
      if ! grep -q "dm_crypt-main" /etc/crypttab 2>/dev/null; then
        echo "dm_crypt-main UUID=$LUKS_UUID none luks,discard,tpm2-device=auto,tpm2-pcrs=0+7" >> /etc/crypttab
      fi
      
      # Update initramfs with correct crypttab
      update-initramfs -u -k all
      '

    # Install Japanese language support and configure locale
    - curtin in-target -- apt-get install -y language-pack-ja language-pack-gnome-ja
    - curtin in-target -- locale-gen ja_JP.UTF-8
    - curtin in-target -- update-locale LANG=ja_JP.UTF-8
    
